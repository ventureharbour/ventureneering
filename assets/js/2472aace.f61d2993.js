"use strict";(self.webpackChunkVentureneering=self.webpackChunkVentureneering||[]).push([[2210],{3941:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={authors:"royletron",title:"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly",description:"Wrestling with rest? Try Wrestly!",slug:"wrestly",tags:["libraries","oss"]},l=void 0,u={permalink:"/blog/wrestly",source:"@site/blog/2022-02-28-wrestly.md",title:"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly",description:"Wrestling with rest? Try Wrestly!",date:"2022-02-28T00:00:00.000Z",formattedDate:"February 28, 2022",tags:[{label:"libraries",permalink:"/blog/tags/libraries"},{label:"oss",permalink:"/blog/tags/oss"}],readingTime:1.765,truncated:!0,authors:[{name:"Darren \ud83e\uddd9\u200d\u2642\ufe0f",title:"CTO @ Venture Harbour",url:"https://github.com/royletron",imageURL:"https://github.com/royletron.png",key:"royletron"}],frontMatter:{authors:"royletron",title:"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly",description:"Wrestling with rest? Try Wrestly!",slug:"wrestly",tags:["libraries","oss"]},prevItem:{title:"\ud83c\udf9b Static Exhaustive Switches in Typescript",permalink:"/blog/exhaustive-switch"},nextItem:{title:"\ud83e\udddb\u200d\u2642\ufe0f Von Count",permalink:"/blog/count-voncount"}},p={authorsImageUrls:[void 0]},c=[],d={toc:c};function h(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This week we have been working with remote APIs, Webhooks and OAuth"),". Those alone will be blogged about plenty in the future, but in doing this task we have bourne another mini project that we have found really useful. Typically, when doing this sort of work, I've always had this habit of running a dummy server that logs out requests and blindly responds to them. This helps me see what is going on, and what external things are either redirecting or posting directly to our APIs. Up to now I have never really done much more than run a server where all requests are ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log"),"'ed and ",(0,o.kt)("inlineCode",{parentName:"p"},"res.send('ok')"),"'ed, but this time around added an SQLite backed so I could see request history, and a nice front end so the payloads were readable. ",(0,o.kt)("a",{parentName:"p",href:"https://npmjs.com/wrestly"},"So here is ",(0,o.kt)("em",{parentName:"a"},"wrestly"))),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Our Glorious Mascot",src:n(8020).Z,width:"87",height:"80"}))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Wrestly")," is a simple http server that will accept any requests and store their ",(0,o.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"headers")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cookies")," as well as any ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," params into a SQLite DB. It allows you to list the requests already made, and look at each one in detail. We don't really focus on the response, it just gives you a nice ",(0,o.kt)("inlineCode",{parentName:"p"},"200")," and whatever the contents of the original request was. Routes that go via ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/**/*")," paths will always respond with JSON - which was useful for us - otherwise it just shows Wrestly's own webpage with the contents of the original request. It'll parse any ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"x-www-form-urlencoded")," bodies included with requests, and it'll also record the ",(0,o.kt)("inlineCode",{parentName:"p"},"method")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),"."),(0,o.kt)("figcaption",{align:"center"},"Lists of requests that have come in"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Listing",src:n(5317).Z,width:"2526",height:"2004"})),(0,o.kt)("p",null,"You can access the list view at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:6789/_x")," and it should show all recorded requests to date. ",(0,o.kt)("em",{parentName:"p"},"Note")," that by default requests are stored in memory, so if you quit ",(0,o.kt)("inlineCode",{parentName:"p"},"wrestly")," and start again it'll clear saved requests. You can override this by setting a designated ",(0,o.kt)("inlineCode",{parentName:"p"},"sqlite")," file with the ",(0,o.kt)("inlineCode",{parentName:"p"},"-d")," eg."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wrestly -d ./requests.sqlite\n")),(0,o.kt)("figcaption",{align:"center"},"View of a single request"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Request",src:n(2809).Z,width:"2526",height:"2004"})),(0,o.kt)("p",null,"Combine this with something like ",(0,o.kt)("a",{parentName:"p",href:"https://ngrok.com"},(0,o.kt)("inlineCode",{parentName:"a"},"ngrok"))," and you have a pretty whizzy environment for working on external webhooked services etc."))}h.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5317:function(e,t,n){t.Z=n.p+"assets/images/listing-98803e57fbd618c29d91830faa8732d1.png"},8020:function(e,t,n){t.Z=n.p+"assets/images/logo-6eab9b24879d187ebbedae9eb001c4f4.svg"},2809:function(e,t,n){t.Z=n.p+"assets/images/request-fb57f87f566db8348100d5999c8e1ed3.png"}}]);