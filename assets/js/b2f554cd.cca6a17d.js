"use strict";(self.webpackChunkVentureneering=self.webpackChunkVentureneering||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"hiring-better","metadata":{"permalink":"/blog/hiring-better","source":"@site/blog/2022-04-12-hiring.mdx","title":"\ud83e\uddb9\u200d\u2640\ufe0f How to hire better engineers","description":"Hiring engineers is horribly difficult, you either have to make a call on someone with a tiny window of visibility or create a lengthy process that puts people off.","date":"2022-04-12T00:00:00.000Z","formattedDate":"April 12, 2022","tags":[{"label":"hiring","permalink":"/blog/tags/hiring"},{"label":"team","permalink":"/blog/tags/team"},{"label":"process","permalink":"/blog/tags/process"}],"readingTime":8.43,"truncated":true,"authors":[{"name":"Darren \ud83e\uddd9\u200d\u2642\ufe0f","title":"CTO @ Venture Harbour","url":"https://github.com/royletron","imageURL":"https://github.com/royletron.png","key":"royletron"}],"frontMatter":{"authors":"royletron","title":"\ud83e\uddb9\u200d\u2640\ufe0f How to hire better engineers","description":"Hiring engineers is horribly difficult, you either have to make a call on someone with a tiny window of visibility or create a lengthy process that puts people off.","slug":"hiring-better","tags":["hiring","team","process"]},"nextItem":{"title":"\ud83d\udc7eTaming Type Inferenece","permalink":"/blog/taming-type-inference"}},"content":"Hiring engineers is horribly difficult, you either have to make a call on someone with a tiny window of visibility or create a lengthy process that puts people off. In this article I show you how to hit that sweet spot of teasing out whether a candidate has the desired skills and behaviors, without spending weeks getting there.\\n\\n\x3c!--truncate--\x3e\\n\\nWe have a simple rule when it comes to hiring -\\\\_focus on trus_t. Developers come in so many different varieties and are typically rated based on their ability to code, or their understanding of the \u2018process\u2019 of development. Our aim in interviewing is to focus on how trustworthy the individual is: can we trust that they will work autonomously and take charge of their development? This can sound quite bizarre, and maybe a little scary at first, but in reality this just means that you want to hear more about the individual than you do their code. Our approach to this is an interview process that focuses on how their team works day-to-day, and benchmarking their technical expertise - which helps our understanding of the investment we would have to place in the candidate post hire.\\n\\n## Candidate scoring\\n\\nAs well as answering the fundamental question around trust, we also have to score the candidate against how we feel they will perform in the role - this is particularly vital in interviews for heavily contested roles (a really nice problem to have). We rate candidates across the same core areas that we expect them to perform in their role:\\n\\n1. **Results** - the tangible business benefit of their effort. Will they deliver products, take ownership of their work, make positive decisions and create impact in their field?\\n2. **Direction** - where the business is headed. Will they contribute to driving the business in the right direction, spot opportunities and pitfalls and help to steer the company?\\n3. **Talent** - nurturing existing and contributing to find new hires. Will they push their own personal and professional development, help level up the team as a whole and contribute to hiring?\\n4. **Culture** - maintaining our values and working environment. Will they collaborate with everyone fairly, communicate clearly and contribute to the heart of the company?\\n5. **Craft** - technical ability. Do they have the skills currently (raw or experienced) that we are looking for?\\n\\nOur scoring is much like a golf scoring card, where we have a baseline for the role that is expected, we can then go two points above, or two points below that baseline. We expect that there could be some work required to get the individual to the required standard, but having this scoring allows us to compare candidates objectively.\\n\\n## The VH Engineer Interview\\n\\n### First Interview: Technical Screening\\n\\nPrior to the interview we will ask the candidate to do one of two prepared technical tasks, tailored to be achievable in under 90 minutes. A large part of me loathes the use of technical tasks, but the alternative is to put the candidate on the spot during a meeting - but we\u2019re not assessing how well a candidate can reason through nervousness, so an at-home test is a fairer approach . The end product of the technical task isn\u2019t code - and we never ask directly for code to be provided. Instead we ask the candidate to present us through what they put together (we may request to look at the code in the session or ask them how they did certain things - but really the code always has to be theirs).\\n\\n![](https://lh3.googleusercontent.com/5rWjLZlllHZcau3a9fgMqbygHL309dO-a5wdHzQaiILv92-Lxp6EHpK55mSpyEVTgM41WsocWBuUIH8yWeXVvwubvaoJ2lArTj0ic_yOmkOc7rYR7tMz9Tx05nKf_afSzQ_LzLoL)\\n\\nThis presentation is really important, and we instruct the candidate that we would like to see what choices they could\u2019ve made as well as the choice they did make. As a fully remote team your ability to communicate effectively with peers on code, choices and architecture is actually more important than the code itself. Our aim is to find the candidates who can do this well, as we know they\u2019re going to be much more effective when it comes to learning and developing.\\n\\n### First Interview: They Interview You\\n\\nDuring the first interview it is also vital that you give the candidate the opportunity to interview the company. This is so often overlooked, or candidates are asked to just \u2018email\u2019 questions over because the interview is running late - this can\u2019t be allowed to happen.\\n\\n![](https://lh5.googleusercontent.com/gkuiVOUGkUS8MRfhGuysW5SsMOHZAeDtTDr0K6gq9oTELYKvJjQmx3OkVBaXxZFY3vlaeW-qVMIqJe63iwctnUqWmLhJKLFoHz3Rr-L0LXVl7BvV4yLNsCyICZ_HxwCHF8LvqG0x)\\n\\nWe inform them prior to the meeting that they will have space in the interview to ask us questions, as it helps prompt them to prepare. So often the questions from candidates can almost be as useful as their answers to yours. Did they understand the role? Do they share the same values as the company? Do they understand all of the benefits - or sometimes lack of. Do they worry about the same sorts of issues as the rest of the team?\\n\\n### Second Interview: Collaboration & Team Fit\\n\\nWhen progressing to a second interview we then take the development exercise one step further, inviting them to participate in a pair programming session with another of our developers - this requires no preparation prior to the session. Ideally this should be someone they have yet to meet - it\u2019s important this person is seen less as an interviewer and more as a \u2018future peer\u2019. The paired task is always on the candidate\'s original submission project - again their code, their laptop, their session. The task is usually quite small and in code terms quite redundant, but represents a real day-to-day requirement of our team. They\u2019ll be provided with a ticket and where possible will be left alone with the paired developer.\\n\\n![](https://lh4.googleusercontent.com/AacP430pphG5NmuYHBNi2n3dq8MdHlc1FyAY2ZAe2ddPsxHmWLO5XM9YW4cCvGfQYBftTkZ_7YyuPdSgBl80fJNa1HaMagD-HUhOM86xAVOAKYWbGm44amZQ14MXJbUwTahrKN8z)\\n\\nOnce complete we will ask the candidate and their pair to present back their solution to the ticket. The pairing developer knows to focus less on code and more on \u2018what they would code\u2019, so the task doesn\u2019t have to end with delivery. Once complete - or at least solved logically - we invite the candidate and their pair to discuss with the interviewing party what they have done. We get their pair on the same side of the table to best replicate what day to day team work would be like, and how they handle that. Once the \u2018development\u2019 aspect is complete we move on to a more traditional Q&A to try to score them on the other areas outside of day-to-day work.\\n\\n## What we are looking for\\n\\nThis process attempts to emulate our working day as closely as possible - pairing is a really effective exercise for all our team members and is vital to our day to day. What we ask our pairing developers to do is to note the sorts of things that came up during the conversations:\\n\\n- Did they explain what exposure they have had to a particular technology?\\n- Did they try to reason about the problem with a pseudo shorthand?\\n- Did they ask questions about the ticket?\\n- Did they look to break the ticket down into a number of different functions/classes etc?\\n- Did they suggest looking up any documentation/other reference implementations (yes, I mean Stack Overflow)?\\n\\nIt\u2019s not to say that any of these is more important, or that there are any right answers, but the gist of what we want to see is they take the ticket seriously, focus on breaking down the issue, consider things before jumping in, and use the pair effectively.\\n\\n## Making a decision\\n\\nOur aim with all of the interviews is to get a number of score cards from the interviewers involved. Not all of them can be complete - as developers will focus on the craft aspect and maybe miss some parts of culture or talent and vice versa with the management Q&A - but we end up with a complete picture. In most cases we can simply average the scores across scorecards, but where bigger disparities exist this will be the trigger for a conversation about that particular area - our aim here is always to have a singular rated scorecard.\\n\\n![](https://lh6.googleusercontent.com/YIERRmv84X2Et0H94sA4S0BQDQqNCsAExMbWbrrVPuI9XSm6Wq_dsYRb5g3OTP7CSspRD6IJ29_y4SU_0w46ocyNI9IBkOmYWEEpv4Mm-RfXlC1m23T0vPkMQneRLEnXrI3n1G1n)\\n\\nWith all the numbers in you may be able to see a clear objective winner, but sometimes a balancing act is required to judge whether having a higher \u2018craft\u2019 is more or less desirable compared to \u2018Results\u2019. Whatever happens, it\u2019s important to trust your scoring - if you don\u2019t then you need to rethink how you are scoring. Once a scored decision is made it\u2019s important to review that against a more subjective decision, including asking interviewing members to make their choice is important too. We tend to only allow the objective score to lead our decision, but if the subjective \u2018winner\u2019 is different then it calls for a review.\\n\\n## Process post mortem\\n\\nVenture Harbour has a strong culture of retrospection, we are always looking at everything we do to see if it can be optimised or automated. From CEO through to coders, we empower people to put forward when something isn\u2019t working for them, and work across the business to find solutions. Hiring is no exception, and when we get a new hire this represents a really good opportunity to question whether the process worked from their perspective. We find this to be a less useful exercise on day one, but after several months - even as part of a probation review - we ask questions about the process of how they came into the job. The questions aren\u2019t rigid, but you want to pick at their experience of the process as an outsider.\\n\\n- Did they find the pairing panic inducing?\\n- Did our presentation of the role match the current reality?\\n- Could we have done more to make them feel welcome?\\n- Would they like to have seen more or less during the Q&A?\\n\\nRegardless of how mature you believe your hiring process is, it is vital that you constantly evaluate it. The world changes, people evolve and different things become important to them - if you don\u2019t recognise that you will fail. Get hiring right, and a lot of things click into place."},{"id":"taming-type-inference","metadata":{"permalink":"/blog/taming-type-inference","source":"@site/blog/2022-04-04-the-unreasonable-power-of-const-assertions.mdx","title":"\ud83d\udc7eTaming Type Inferenece","description":"as const assertions","date":"2022-04-04T00:00:00.000Z","formattedDate":"April 4, 2022","tags":[{"label":"Typescript","permalink":"/blog/tags/typescript"},{"label":"Programming","permalink":"/blog/tags/programming"},{"label":"Types","permalink":"/blog/tags/types"},{"label":"Type Inference","permalink":"/blog/tags/type-inference"}],"readingTime":7.975,"truncated":true,"authors":[{"name":"James","title":"Engineer @ Venture Harbour","url":"https://github.com/sudo-jaa","imageURL":"https://github.com/sudo-jaa.png","key":"sudo-jaa"}],"frontMatter":{"authors":"sudo-jaa","title":"\ud83d\udc7eTaming Type Inferenece","description":"as const assertions","slug":"taming-type-inference","tags":["Typescript","Programming","Types","Type Inference"]},"prevItem":{"title":"\ud83e\uddb9\u200d\u2640\ufe0f How to hire better engineers","permalink":"/blog/hiring-better"},"nextItem":{"title":"\ud83d\udd78 Top 5 social media regex for web developers 2022","permalink":"/blog/top-5-social-media-regex-for-web-developers-2022"}},"content":"**We\'ve all been there.** The same problem for three days now. You\'ve exhausted every developer in your team with your incessant quacking; there\'s no amount of rubber ducking that can help you. No matter who looks at it,\\nno matter their level of experience, no matter what phase-4 superpowers they might wield against the program, it does not make sense. You take a walk, eat some fruit, listen to that one banger that Iceland put out for the cancelled eurovision, \\nneck _another_ coffee, and get back to frustrating your entire team with the endless clack-clack-clacking of your blue-switch keyboard. \\nYou think you might have finally figured it out. Your eyes light up with relief measured in days. The build hasn\'t failed twenty seconds in this time. It\'s happening. It\'s really happening.\\n\\nNope. Just kidding.\\nAnother type error.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'ve ever worked with Typescript, this is likely to have been your reality at some point or another. Especially if you have recently migrated from Typescript\'s more dynamic sibling: Javascript. For some reason you can\'t explain, you end up programming into the early hours. It\'s at times like this that\\nthe horror novel you\'ve been reading begins to seep into your reality. You somehow come to know that you are the hapless acolyte chanting into the void with naught but a sage candle,\\nand the Typescript compiler is some mighty Elder God whose machinations are unknowable to mere mortals such as yourself.\\n\\nLet\'s break down some compiler behaviour, take a deep dive into general (wide) type inference, how we can explicitly tell the compiler to instead infer narrow types, and how we can use this to our advantage.\\n\\nTypescript is always going to try to infer a type from your variables. If you\'ve done a good job keeping things typed so far, this will usually be really helpful in keeping track of the data you\'re operating on.\\nIf there\'s some instance of an `any` variable in the data leading to the function you\'re working on now, then you might start to get a little burned by your own hubris. The worst case scenario is that everything is `any`, and you are just writing javascript with extra\\nsteps for some unfathomable reason. \\nBut what about if i\'m defining new variables from scracth that don\'t depend on any other data. Surely Typescript will always get it right and keep me covered, right?\\n\\n...Right? \\n\\nLet\'s look at some examples. Starting with the humble `Array`. \\n\\n```ts\\nconst arr = [];\\n\\narr.push(1);\\narr.push(\\"hello\\");\\n```\\n\\nThis is, annoyingly, valid Typescript. You can log this out and get `[ 1, \'hello\' ]`. The reason this works is because at the point our `arr` variable is declared, Typescript does not know what our array _contains_. The type of `arr` is *inferred* as \\n`any[]`. It is an array that can contain any data or object. Typescript is dropping type information for items inside. We can push anything we want. \\n\\nThere are two remedies for this frighteningly dynamic behaviour: explicitly writing the type in the variable definition, or providing the array with some data at the point of declaration. \\n\\nIf we now write our program as follows: \\n\\n```ts\\nconst arr: string[] = [];\\n\\narr.push(1);\\narr.push(\\"hello\\");\\n```\\n\\nWe get the following error:\\n\\n```ts\\nerror TS2345: Argument of type \'number\' is not assignable to parameter of type \'string\'.\\n\\n3 arr.push(1);\\n           ~\\n```\\n\\nWe cannot push a number to an array of strings. At the point of declaration, `arr` is of type `string[]`.\\n\\nWe can achieve the same effect by allowing typescript to infer this type from the initial declaration, like so:\\n\\n```ts\\nconst arr = [1];\\n\\narr.push(1);\\narr.push(\\"hello\\");\\n```\\n\\nThe compiler now fails for a similar reason:\\n\\n```ts\\nerror TS2345: Argument of type \'string\' is not assignable to parameter of type \'number\'.\\n\\n4 arr.push(\\"hello\\");\\n```\\n\\nOur `arr` variable is declared with the type `number[]` based on the initial data we passed in.\\n\\nType inference is great if you\'re careful. Generally speaking though it is always a safer bet to explicitly type your data if there is any doubt about the integraity of the data going into the declaration. An inferred type cannot protect you against mistakes\\nbecause the compiler does not know your intention. Take the following example:\\n\\n```ts\\nconst a = 1;\\nconst b = \\"2\\";\\nconst c = 3;\\n\\nconst arrayOfNumbers = [a, b, c];\\n```\\n\\nThis code compiles just fine! And although you think your array can only contain numbers, a mistake has defined this type as `(string | number)[]`, meaning you are now able to unwittingly push strings to your array. This will absolutely cause you\\nunrecoverable heartache in the near future, as you weigh the heft of this silly mistake some point down the line.\\nIf you had explicitly typed your array to begin with, then this issue is completely nullified for the rest of time:\\n\\n```ts\\nconst a = 1;\\nconst b = \\"2\\";\\nconst c = 3;\\n\\nconst arrayOfNumbers: number[] = [a, b, c];\\n```\\n\\n```ts\\nerror TS2322: Type \'string\' is not assignable to type \'number\'.\\n\\n5 const arrayOfNumbers: number[] = [a, b, c];\\n                                       ~\\n```\\nYou will never again be able to push strings to your array of numbers.\\n\\n\\n\\nSo now we know how type inference behaves. Let\'s look at a hidden pitfall. \\n\\nTake a look at this array declaration:\\n\\n```ts\\nconst arr = [1, 2];\\n```\\n\\nWhat is the type of `arr`? Has typescript decided that this is an array of numbers, or a two-item array of numbers. There is a subtle difference between these two types of data. \\n\\nIt turns out Typescript will infer the most general possible type for an inferred-type variable. `arr` above is an array of numbers: `number[]`. This means the compiler is expecting the data contained in `arr` to be a variable length array of numbers that \\nwe might push to, pop from, and slice up. Typescript is *not* expecting this variable, despite it\'s initial value, to remain as a fixed two-item tuple. \\n\\nThis holds a few implications. Importantly, we cannot spread our `arr` variable to two specific values that can be used in a function. \\n\\nThe following is not a valid program:\\n\\n```ts\\nconst arr = [1, 2];\\n\\nconst sum = (valueA: number, valueB: number) => {\\n  return valueA + valueB\\n}\\n\\nconsole.log(sum(...arr))\\n```\\n\\nDespite the fact that our `arr` variable is an array of two numbers, Typescript cannot guarantee this so it is rejected by the compiler:\\n\\n```ts\\nerror TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.\\n\\n7 console.log(sum(...arr))\\n                  ~~~~~~\\n```\\n\\nThis is invalid because, as discussed before, Typescript will always infer the most general type that is assignable to your data. `number[]` is more general than `[number, number]`, and so the former is used, even if the latter is technically correct. \\n\\nYou can solve this one of two ways: you can either type the value of `arr` explicitly, or you can use a feature introduced in Typescript `3.4`: [const assertions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions).\\n\\n**What the heck is a const assertion?**\\n\\nSimply put - a const assertion tells the compiler that this data should be inferred to the narrowest possible type it is possible to give this data, and make it readonly for good measure. \\n\\nIt looks like this:\\n\\n```ts\\nconst arr = [1, 2] as const;\\n\\nconst sum = (valueA: number, valueB: number) => {\\n  return valueA + valueB\\n}\\n\\nconsole.log(sum(...arr))\\n```\\n\\nThis program is now valid. What is essentially happening is we have told Typescript to not bother with finding a general type for `arr`. We don\'t _want_ general. We want _exact_. We want a *narrow type*. It\'s essentially equivalent to writing:\\n\\n```ts\\nconst arr: readonly [number, number] = [1, 2];\\n\\nconst sum = (valueA: number, valueB: number) => {\\n  return valueA + valueB\\n}\\n\\nconsole.log(sum(...arr))\\n```\\n\\nOur program works because we have told the compiler that `arr` is always going to be a tuple of two numbers that is not going to change. It can happily spread these two numbers and use them safe in the knowledge that there are two of them, and our function\\nwill be satisfied with all the arguments it needs to complete.\\n\\n\\nThere is a cool use case for this in the wild: an alternative to `enum` where the keys of an `as const` array can be used in further type definitions. Considering that items in a readonly tuple can be indexed by number reliably, you can use `typeof arr[number]` to represent\\nthe type for items contained in your `as const` array.\\n\\nThis can be extremely powerful when working with a utility such as *lodash* on a task such as stripping data from an object returned from an typed API call, where you know the kinds of keys on the returned object and you need to get the compiler to understand them too:\\n\\n```ts\\nconst { pick } = require(\\"lodash\\");\\n\\nconst myObject = {\\n  a: 1,\\n  b: 2,\\n  c: 3,\\n  d: 4,\\n  e: 5\\n};\\n\\nconst keys = [\\"a\\", \\"b\\", \\"c\\"] as const;\\n\\nconst stripData = (object: Record<string, number>): Record<typeof keys[number], number> => {\\n  return pick(object, ...keys)\\n}\\n\\nconst stripped = stripData(myObject);\\n```\\n\\nWe can use an `as const` array to define our keys, and use these values to strip unecessary ones from our bloated object. And because we can use the idnexed value from our `as const` array as types as _well as_ values, we can define a strong return type\\nbased on these values with a `Record`. Typescript now knows that `stripped` is an object of type `{a: number, b: number, c: number}`.\\n\\nGood to know!"},{"id":"top-5-social-media-regex-for-web-developers-2022","metadata":{"permalink":"/blog/top-5-social-media-regex-for-web-developers-2022","source":"@site/blog/2022-03-28-top-5-social-media-regex-for-web-developers-2022.mdx","title":"\ud83d\udd78 Top 5 social media regex for web developers 2022","description":"Looking to find user profile strings from social media urls? Look no further!","date":"2022-03-28T10:00:00.000Z","formattedDate":"March 28, 2022","tags":[{"label":"regex","permalink":"/blog/tags/regex"}],"readingTime":1.255,"truncated":true,"authors":[{"name":"Daniel","title":"Chaotic Neutral Breachgnome Loremaster @ Venture Harbour","url":"https://github.com/dr-farr","imageURL":"https://github.com/dr-farr.png","key":"dr-farr"}],"frontMatter":{"authors":"dr-farr","title":"\ud83d\udd78 Top 5 social media regex for web developers 2022","description":"Looking to find user profile strings from social media urls? Look no further!","slug":"top-5-social-media-regex-for-web-developers-2022","date":"2022-03-28T10:00","tags":["regex"]},"prevItem":{"title":"\ud83d\udc7eTaming Type Inferenece","permalink":"/blog/taming-type-inference"},"nextItem":{"title":"\ud83d\udc1b GraphQL Object Caching Bug","permalink":"/blog/caching-bug"}},"content":"The year is 2022, you sit perched at your desk, your central nervous system is a delicate balance of coffee, vegan tortilla chips and whatever your local mini market promotes as \'pastries\'...\\n\\n\x3c!--truncate--\x3e\\n\\nYou stare blankly at your monitor recovering from the latest adrenaline dump after bringing down production with your last commit, saliva goes un-noticed as is trickles from the corner of your mouth and down your slacked jaw.\\n\\"Regex... how how hard can it it be?\\" You ask yourself. Your fingers begin to bash upon your keyboard in the a-rhythmic way you\'ve become accustomed to. You try to regain control of your thoughts from the dark cloud of self doubt, imposter syndrome and whether that last pastry was actually gluten free.\\nLanguished you trawl the web in search of your liberator. \\"This is it...\\" you announce, \\"this is it....\\" as you click a link to an perlmonks.com forum post from 2004. Feverishly you scroll up and down the page copying and pasting into your IDE almost at random.\\n\\"DAMN IT!\\" you scream as your hammer the table with a clenched fist, sending the 3 day old tower of unwashed coffee cups crashing to the floor, another dead end.\\n\\"If only someone could write a blog post detailing and up-to-date way of obtaining user profiles from social media urls\\" you plead.... IF ONLY!\\"\\n\\n**Instagram**\\n```\\n(?:https?:)?\\\\/\\\\/(?:www\\\\.)?(?:instagram\\\\.com|instagr\\\\.am)\\\\/(?P<username>[A-Za-z0-9_](?:(?:[A-Za-z0-9_]|(?:\\\\.(?!\\\\.))){0,28}(?:[A-Za-z0-9_]))?)\\n```\\n\\n**Youtube** \\n```\\n(?:https?:)?\\\\/\\\\/(?:[A-z]+\\\\.)?youtube.com\\\\/user\\\\/(?P<username>[A-z0-9]+)\\\\/?\\n```\\n\\n**Facebook**\\n```\\n(?:https?:)?\\\\/\\\\/(?:www\\\\.)?(?:facebook|fb)\\\\.com\\\\/(?P<profile>(?![A-z]+\\\\.php)(?!marketplace|gaming|watch|me|messages|help|search|groups)[A-z0-9_\\\\-\\\\.]+)\\\\/?\\n```\\n\\n**Twitter**\\n```\\n(?:https?:)?\\\\/\\\\/(?:[A-z]+\\\\.)?twitter\\\\.com\\\\/@?(?!home|share|privacy|tos)(?P<username>[A-z0-9_]+)\\\\/?\\n\\n```\\n**Github**\\n```\\n(?:https?:)?\\\\/\\\\/(?:www\\\\.)?github\\\\.com\\\\/(?P<login>[A-z0-9_-]+)\\\\/?\\n```\\n*small print: these may or not work*"},{"id":"caching-bug","metadata":{"permalink":"/blog/caching-bug","source":"@site/blog/2022-03-28-caching-bug.mdx","title":"\ud83d\udc1b GraphQL Object Caching Bug","description":"The reason why your apollo graph may be broken","date":"2022-03-28T00:00:00.000Z","formattedDate":"March 28, 2022","tags":[{"label":"graphql","permalink":"/blog/tags/graphql"},{"label":"apollo","permalink":"/blog/tags/apollo"}],"readingTime":1.29,"truncated":true,"authors":[{"name":"Paul \ud83d\udc68\u200d\ud83d\ude80","title":"Engineer @ Venture Harbour","url":"https://github.com/paulkennethkent","imageURL":"https://github.com/paulkennethkent.png","key":"paulkennethkent"}],"frontMatter":{"authors":"paulkennethkent","title":"\ud83d\udc1b GraphQL Object Caching Bug","description":"The reason why your apollo graph may be broken","slug":"caching-bug","tags":["graphql","apollo"]},"prevItem":{"title":"\ud83d\udd78 Top 5 social media regex for web developers 2022","permalink":"/blog/top-5-social-media-regex-for-web-developers-2022"},"nextItem":{"title":"\ud83c\udf9b Static Exhaustive Switches in Typescript","permalink":"/blog/exhaustive-switch"}},"content":"**TLDR - make sure the nested objects in the request have unique ids**\\n\\n\x3c!--truncate--\x3e\\n\\nI am a huge fan of GraphQL and all of its typed goodness. On our most recent project we have been using Apollo Client to manage the graph layer, which for the most part has been good but one thing that has caused us headaches is the cache.\\n\\nIn this simple example to recreate the issue we are requesting all teams and their respective players. Knowing that some teams could have players with the same name.\\n\\n```ts\\n    teams {\\n      id\\n      name\\n      players{\\n        id\\n        name\\n        poistion\\n      }\\n    }\\n\\n```\\n\\nLet\'s say the ids are a simple dot notation of the full team name and the player\'s full name. I am making a request for all players that match \u201crobinson\u201d.\\n\\nIn the grahpql playground I would see the following:\\n\\n```\\n[\\n    {\\n        \\"id\\": \\"blackburn.rovers\\",\\n        \\"name\\": \\"blackburn.rovers\\",\\n        \\"players\\": {\\n            \\"id\\": \\"paul.robsinson\\",\\n            \\"name\\": \\"paul.robinson\\",\\n            \\"position\\": \\"goalkeeper\\"\\n        }\\n    },\\n    {\\n        \\"id\\": \\"birmingham\\",\\n        \\"name\\": \\"birmingham\\",\\n        \\"players\\": {\\n            \\"id\\": \\"paul.robsinson\\",\\n            \\"name\\": \\"paul.robinson\\",\\n            \\"position\\": \\"defender\\"\\n        }\\n    }\\n]\\n\\n```\\n\\nNice! That is exactly what I want. In the browser I would see Paul Robinson the Goalkeeper playing for Birmingham. What! Ludicrous.\\n\\nAfter banging my head against the wall for an hour it turns out that it was caching the nested player object based on the ID. Here are a few solutions:\\n\\n1. Unique IDs (of course)\\n2. Ask yourself do you really need that id? Removing the ID from the gql Player object.\\n3. Alias a different field to be the ID."},{"id":"exhaustive-switch","metadata":{"permalink":"/blog/exhaustive-switch","source":"@site/blog/2022-03-07-exhaustive-switches.mdx","title":"\ud83c\udf9b Static Exhaustive Switches in Typescript","description":"Don\'t be afraid of the Typescript compiler - it only wants to be your friend.","date":"2022-03-07T00:00:00.000Z","formattedDate":"March 7, 2022","tags":[{"label":"Typescript","permalink":"/blog/tags/typescript"},{"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":5.705,"truncated":true,"authors":[{"name":"James","title":"Engineer @ Venture Harbour","url":"https://github.com/sudo-jaa","imageURL":"https://github.com/sudo-jaa.png","key":"sudo-jaa"}],"frontMatter":{"authors":"sudo-jaa","title":"\ud83c\udf9b Static Exhaustive Switches in Typescript","description":"Don\'t be afraid of the Typescript compiler - it only wants to be your friend.","slug":"exhaustive-switch","tags":["Typescript","programming"]},"prevItem":{"title":"\ud83d\udc1b GraphQL Object Caching Bug","permalink":"/blog/caching-bug"},"nextItem":{"title":"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly","permalink":"/blog/wrestly"}},"content":"**It\'s 2022, and we are in the golden age of web development**. But for all the advancements that tools like Typescript have made in making our lives easier,\\nthere are still things that it is missing that are staple features in other languages. Thankfully with a little work we are able to emulate some of these features\\nand make our lives easier, reduce the number of bugs we introduce, and make all our colleagues think we\'re awesome with our super esoteric programming skillz.\\n\\n\x3c!--truncate--\x3e\\n\\nOne of the features I miss dearly from languages like *Rust* and *ReScript* is **pattern matching**. And before anybody comes at me: [yes, there is a proposal for\\npattern matching in Typescript](https://github.com/tc39/proposal-pattern-matching). And yes, this proposal should make us all very happy.\\n\\nWhat _is_ pattern matching? To quote the almighty **[book](https://doc.rust-lang.org/book/ch06-02-match.html)**:\\n\\n> Think of a match expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a match, and at the first pattern the value \u201cfits,\u201d the value falls into the associated code block to be used during execution.\\n\\nNow this sounds a lot like something that already exists in both Typescript and javascript: the `switch` statement. And for the most part, a `switch` does act in much the same\\nway as a fully-featured `match`, though with some drawbacks. The main one we\'re going to focus on here is that `switch` cases in Typescript\\nare **not exhaustive**. This means there is no guarantee that your `switch` is going to handle all possible values of your `switch` case.\\nIncidentally, in a `match` in a strongly typed language like *Rust*, this exhaustiveness is **guaranteed** statically by the compiler. You must handle **all possible** cases\\nbefore your code will even run.\\n\\nThis has some advantages. Primarily this aids development in larger teams where multiple engineers are working broadly in the same area.\\nI could create a `match` that handles some variant of a union type or enum, and we would never have to worry about a co-worker\\nadding a new value to the case and forgetting to handle it. Compiler says no. Your co-worker is forced to add the logic they missed. Bugs are avoided. Everyone is happy.\\n\\nYou don\'t get this advantage with a `switch`.\\n\\n\\"But James, you stupid human\\", you say. \\"You realise you can use \'default\' in a switch, right?\\".\\n\\nAbsolutely there is an option to use default, but also if you use it as a catch-all for things that you\'re willing to forget, then\\nyou probably deserve the bugs that are about to come swarming your way.\\nThe issue is that `default` really does just mean *default behaviour* that is non-specific to the value being passed to your switch. You\\nshould probably not rely on it to handle missing cases in types that have distinctly known possible values at the point of compilation.\\n\\n> NOTE: This does not apply to things like `string` and `number` where you really can have a functionally infinite set of values. Cases like this\\n> you should use `default` in a switch because you literally don\'t have any other choice. Though this is a problem that favours eliminating [primitive obsession](https://refactoring.guru/smells/primitive-obsession)\\n> in favour of using stronger types for your data (such as `enum` and `union`), we\'ll discuss that another time.\\n\\nSo what can we do about this? How can we ask the Typescript compiler to check this for us at compile-time?\\n\\nEnter **NEVER**!\\n\\nIf you haven\'t come across if before, `never` is a powerful Typescript type that tells the compiler that the value in question can never occur.\\nEverything is assignable to `never`, but `never` is not assignable to anything. `any` isn\'t even assignable to `never`. It is the ultimate\\nlast word in telling the compiler that this value must never occur.\\n\\nThings like functions that solely throw errors are inferred to return `never`, and that\'s how functions that throw can influence\\nthe control flow of a function.\\n\\nWe can also use `never` to force a `switch` case to be exhaustive, by telling it that the `default` case is `never`.\\n\\nLet\'s produce an example in literally the only context that has any meaning to me anymore: currency from A Song of Ice and Fire:\\n\\n\\n```ts title=\\"Coin.ts\\"\\nenum Coin {\\n    Halfpenny,\\n    Penny,\\n    Halfgroat,\\n    Groat,\\n    Star,\\n    Stag,\\n    Moon,\\n}\\n\\nfunction printValue(coin: Coin) {\\n  switch (coin) {\\n    case Coin.Halfpenny:\\n      console.log(\\"I am worth 23520 Golden Dragons\\")\\n      break;\\n    case Coin.Penny:\\n        console.log(\\"I am worth 11760 Golden Dragons\\")\\n      break;\\n    case Coin.Halfgroat:\\n        console.log(\\"I am worth 5880 Golden Dragons\\")\\n      break;\\n    case Coin.Groat:\\n        console.log(\\"I am worth 2940 Golden Dragons\\")\\n      break;\\n    case Coin.Star:\\n        console.log(\\"I am worth 1470 Golden Dragons\\")\\n      break;\\n    case Coin.Stag:\\n        console.log(\\"I am worth 210 Golden Dragons\\")\\n      break;\\n    case Coin.Moon:\\n      console.log(\\"I am worth 30 Golden Dragons\\")\\n      break;\\n  }\\n}\\n```\\n\\nI can stick any of these coins in that I like, and i\'ll get my value in Dragons.\\n\\nBut wait! I\'ve forgotten a value in my enum. I\'ve forgotten to put in Dragons.\\nIf I go and do that now:\\n\\n```ts\\nenum Coin {\\n    Halfpenny,\\n    Penny,\\n    Halfgroat,\\n    Groat,\\n    Star,\\n    Stag,\\n    Moon,\\n    Dragon\\n}\\n```\\n\\nand call the `printValue()` function, I don\'t get any print out. I\'ve got no default.\\n\\nI could add a default case that handles any unaccounted-for values:\\n\\n```ts\\nfunction printValue(coin: Coin) {\\n  switch (coin) {\\n    case Coin.Halfpenny:\\n      console.log(\\"23520 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Penny:\\n        console.log(\\"11760 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Halfgroat:\\n        console.log(\\"5880 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Groat:\\n        console.log(\\"2940 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Star:\\n        console.log(\\"1470 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Stag:\\n        console.log(\\"210 of me is worth 1 Golden Dragon\\")\\n      break;\\n    case Coin.Moon:\\n      console.log(\\"30 of me is worth 1 Golden Dragon\\")\\n      break;\\n    default:\\n      console.log(\\"I don\'t recognise this currency?\\")\\n  }\\n}\\n```\\n\\nBut my default needs to be generic no matter how many new coins I add. It can\'t ever be a handler for custom logic for new items I add to the enum.\\n\\nHowever, we can use the default case to **assign** the coin to `never`:\\n\\n```ts\\n    default:\\n      const exhaust: never = coin;\\n      throw new Error(exhaust);\\n  }\\n```\\n\\nAnd now the moment we try to compile our code with an enum case unaccounted for, we get the following:\\n\\n\\n```\\nindex.ts:36:13 - error TS2322: Type \'Coin\' is not assignable to type \'never\'.\\n\\n36       const exhaust: never = coin;\\n~~~~~~~\\n\\n\\nFound 1 error.\\n```\\n\\nThe Typescript compiler is now actively working for us to prevent any bugs that might arise from missing branches in this switch. It is\\nnow exhaustive, and no matter how many new items we add to our enum, we are forced by default to handle them, or we\'re not shipping.\\n\\nTake **THAT**, dynamic languages!"},{"id":"wrestly","metadata":{"permalink":"/blog/wrestly","source":"@site/blog/2022-02-28-wrestly.md","title":"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly","description":"Wrestling with rest? Try Wrestly!","date":"2022-02-28T00:00:00.000Z","formattedDate":"February 28, 2022","tags":[{"label":"libraries","permalink":"/blog/tags/libraries"},{"label":"oss","permalink":"/blog/tags/oss"}],"readingTime":1.765,"truncated":true,"authors":[{"name":"Darren \ud83e\uddd9\u200d\u2642\ufe0f","title":"CTO @ Venture Harbour","url":"https://github.com/royletron","imageURL":"https://github.com/royletron.png","key":"royletron"}],"frontMatter":{"authors":"royletron","title":"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly","description":"Wrestling with rest? Try Wrestly!","slug":"wrestly","tags":["libraries","oss"]},"prevItem":{"title":"\ud83c\udf9b Static Exhaustive Switches in Typescript","permalink":"/blog/exhaustive-switch"},"nextItem":{"title":"\ud83e\udddb\u200d\u2642\ufe0f Von Count","permalink":"/blog/count-voncount"}},"content":"**This week we have been working with remote APIs, Webhooks and OAuth**. Those alone will be blogged about plenty in the future, but in doing this task we have bourne another mini project that we have found really useful. Typically, when doing this sort of work, I\'ve always had this habit of running a dummy server that logs out requests and blindly responds to them. This helps me see what is going on, and what external things are either redirecting or posting directly to our APIs. Up to now I have never really done much more than run a server where all requests are `console.log`\'ed and `res.send(\'ok\')`\'ed, but this time around added an SQLite backed so I could see request history, and a nice front end so the payloads were readable. [So here is _wrestly_](https://npmjs.com/wrestly)\\n\\n\x3c!--truncate--\x3e\\n\\n<div style={{\\"textAlign\\": \\"center\\"}}>\\n\\n![Our Glorious Mascot](/blog/wrestly/logo.svg)\\n\\n</div>\\n\\n**Wrestly** is a simple http server that will accept any requests and store their `body`, `headers` and `cookies` as well as any `query` params into a SQLite DB. It allows you to list the requests already made, and look at each one in detail. We don\'t really focus on the response, it just gives you a nice `200` and whatever the contents of the original request was. Routes that go via `/api/**/*` paths will always respond with JSON - which was useful for us - otherwise it just shows Wrestly\'s own webpage with the contents of the original request. It\'ll parse any `JSON` or `x-www-form-urlencoded` bodies included with requests, and it\'ll also record the `method` and `url`.\\n\\n<figcaption align=\\"center\\">Lists of requests that have come in</figcaption>\\n\\n![Listing](/blog/wrestly/listing.png)\\n\\nYou can access the list view at `http://localhost:6789/_x` and it should show all recorded requests to date. _Note_ that by default requests are stored in memory, so if you quit `wrestly` and start again it\'ll clear saved requests. You can override this by setting a designated `sqlite` file with the `-d` eg.\\n\\n```bash\\nwrestly -d ./requests.sqlite\\n```\\n\\n<figcaption align=\\"center\\">View of a single request</figcaption>\\n\\n![Request](/blog/wrestly/request.png)\\n\\nCombine this with something like [`ngrok`](https://ngrok.com) and you have a pretty whizzy environment for working on external webhooked services etc."},{"id":"count-voncount","metadata":{"permalink":"/blog/count-voncount","source":"@site/blog/2022-02-18-count-voncount.mdx","title":"\ud83e\udddb\u200d\u2642\ufe0f Von Count","description":"Counting lines has never been so easy!","date":"2022-02-18T00:00:00.000Z","formattedDate":"February 18, 2022","tags":[{"label":"libraries","permalink":"/blog/tags/libraries"},{"label":"oss","permalink":"/blog/tags/oss"}],"readingTime":1.6,"truncated":true,"authors":[{"name":"Darren \ud83e\uddd9\u200d\u2642\ufe0f","title":"CTO @ Venture Harbour","url":"https://github.com/royletron","imageURL":"https://github.com/royletron.png","key":"royletron"}],"frontMatter":{"authors":"royletron","title":"\ud83e\udddb\u200d\u2642\ufe0f Von Count","description":"Counting lines has never been so easy!","slug":"count-voncount","tags":["libraries","oss"]},"prevItem":{"title":"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly","permalink":"/blog/wrestly"},"nextItem":{"title":"\ud83d\udc4b Hello World","permalink":"/blog/hello-world"}},"content":"**We recently found need to count lines of our code**, but with added context that things like `cloc` can\'t give us. Basically at a glance we wanted to see the use of certain features/components/libraries so that we could phase them out slowly over time and see progress \ud83e\uddee. To that end [we produced _VonCount_](https://github.com/ventureharbour/voncount)\\n\\n\x3c!--truncate--\x3e\\n\\n<div style={{\\"textAlign\\": \\"center\\"}}>\\n<code>\\n\\n![Our Glorious Mascot](/blog/count-voncount/logo.svg)\\n<h2>I vant to count your lines...</h2>\\n\\n</code>\\n</div>\\n\\n**VonCount** produces tables of results for folders of source code, those results are determined by an optional configuration. The configuration can decide any number of `groups` which are named and are specified by patterns that match the start and end of a particular block of something. For example _documentation_ where you want to count lines between `/**` and `*/`:\\n\\n```json title=\\"count.json\\"\\n{\\n  \\"groups\\": [\\n    {\\n      \\"name\\": \\"documentation\\",\\n      \\"between\\": {\\n        \\"start\\": \\"^\\\\\\\\/\\\\\\\\*\\\\\\\\*\\",\\n        \\"end\\": \\"^ \\\\\\\\*/$\\"\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nThese will then be matched and counted alongside the rest of the source, producing a table that shows total lines, number of lines in your groups and the representation as a % of those groups.\\n\\n```bash\\nnpm install -g voncount\\nvoncount run .\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 Path           \u2502 Lines \u2502 \'documentation\' \u2502     % \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 test           \u2502   232 \u2502              19 \u2502  8.19 \u2502\\n\u2502   components   \u2502   207 \u2502              19 \u2502  9.18 \u2502\\n\u2502     Header.js  \u2502    18 \u2502               4 \u2502 22.22 \u2502\\n\u2502     Content.js \u2502   179 \u2502              15 \u2502  8.38 \u2502\\n\u2502     Footer.js  \u2502    10 \u2502               0 \u2502     0 \u2502\\n\u2502   pages        \u2502    25 \u2502               0 \u2502     0 \u2502\\n\u2502     index.js   \u2502    25 \u2502               0 \u2502     0 \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n```\\n\\nAnd you get a neat breakdown of it all \ud83d\ude80!\\n\\n_We are still pretty early_ with our build on this, but feel it\'s useful so will be investing more and more time into it. It\'s great for developer led metrics, and removing/adding certain facets to your code base [give it a try](https://www.npmjs.com/package/voncount)."},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","source":"@site/blog/2022-02-17-hello-world.mdx","title":"\ud83d\udc4b Hello World","description":"Welcome to the world of Venture Harbour Engineering!","date":"2022-02-17T00:00:00.000Z","formattedDate":"February 17, 2022","tags":[{"label":"hello","permalink":"/blog/tags/hello"}],"readingTime":1.545,"truncated":true,"authors":[{"name":"Darren \ud83e\uddd9\u200d\u2642\ufe0f","title":"CTO @ Venture Harbour","url":"https://github.com/royletron","imageURL":"https://github.com/royletron.png","key":"royletron"}],"frontMatter":{"authors":"royletron","title":"\ud83d\udc4b Hello World","description":"Welcome to the world of Venture Harbour Engineering!","slug":"hello-world","tags":["hello"]},"prevItem":{"title":"\ud83e\udddb\u200d\u2642\ufe0f Von Count","permalink":"/blog/count-voncount"}},"content":"**It seems to be a tradition** that every blog I start I start with a well wishing _hello world_ post. So here I am, saying it again, _hello world_. This time I have the might of the entire Ventureneering team behind me and we have a lot to share, both to one another and the rest of the wider community. So welcome, I\'m really glad you came along \u2764\ufe0f.\\n\\n#### Questions?\\n\\n\x3c!--truncate--\x3e\\n\\n##### How will this be different to ventureharbour.com?\\n\\nSo we are eager to get more mass appeal content from the engineers on the main site, and really this can act as the catalyst and breeding ground for that content. Not that content has to be editorially more or less significant. It\'s just tonally and demographically the main blog is very different, so this is a place without borders - albeit I hope we would all embody the Venture Harbour spirit! We can also experiment with interactive content a lot easier on this site, with [Docusaurus allowing MDX content](https://docusaurus.io/docs/markdown-features/react) you can embed experiments directly into the page!\\n\\n##### How do I get stuff on here?\\n\\nThe [repository exists publicly](https://github.com/ventureharbour/ventureneering) so internal or external collaborators can submit PRs and we would be delighted to review them. [Check out the Docusaurus docs](https://docusaurus.io/docs/blog#adding-posts) if you are having issues, we can always help get things looking just right if you struggle, so just open issues on our repo if you can\'t get something working.\\n\\n##### What can I write about?\\n\\nAnything you think is interesting. It\'s a great place to share _links_ to interesting articles, _libraries_ or _tech_ that you find whilst journeying through your life as a developer. You can also _teach_ us something, or give us a _TIL_ (today I learned) - short posts are totally totally fine, it doesn\'t need to be epic, but it can also be epic!!"}]}')}}]);