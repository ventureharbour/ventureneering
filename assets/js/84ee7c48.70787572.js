"use strict";(self.webpackChunkVentureneering=self.webpackChunkVentureneering||[]).push([[8254],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=u(n),m=o,g=h["".concat(l,".").concat(m)]||h[m]||c[m]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8963:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={authors:"sudo-jaa",title:"\ud83c\udf9b Static Exhaustive Switches in Typescript",description:"Don't be afraid of the Typescript compiler - it only wants to be your friend.",slug:"exhaustive-switch",tags:["Typescript","programming"]},l=void 0,u={permalink:"/blog/exhaustive-switch",source:"@site/blog/2022-03-07-exhaustive-switches.mdx",title:"\ud83c\udf9b Static Exhaustive Switches in Typescript",description:"Don't be afraid of the Typescript compiler - it only wants to be your friend.",date:"2022-03-07T00:00:00.000Z",formattedDate:"March 7, 2022",tags:[{label:"Typescript",permalink:"/blog/tags/typescript"},{label:"programming",permalink:"/blog/tags/programming"}],readingTime:5.705,truncated:!0,authors:[{name:"James",title:"Engineer @ Venture Harbour",url:"https://github.com/sudo-jaa",imageURL:"https://github.com/sudo-jaa.png",key:"sudo-jaa"}],frontMatter:{authors:"sudo-jaa",title:"\ud83c\udf9b Static Exhaustive Switches in Typescript",description:"Don't be afraid of the Typescript compiler - it only wants to be your friend.",slug:"exhaustive-switch",tags:["Typescript","programming"]},prevItem:{title:"\ud83d\udc1b GraphQL Object Caching Bug",permalink:"/blog/caching-bug"},nextItem:{title:"\ud83e\udd3c\u200d\u2640\ufe0f Wrestly",permalink:"/blog/wrestly"}},p={authorsImageUrls:[void 0]},c=[],h={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"It's 2022, and we are in the golden age of web development"),". But for all the advancements that tools like Typescript have made in making our lives easier,\nthere are still things that it is missing that are staple features in other languages. Thankfully with a little work we are able to emulate some of these features\nand make our lives easier, reduce the number of bugs we introduce, and make all our colleagues think we're awesome with our super esoteric programming skillz."),(0,r.kt)("p",null,"One of the features I miss dearly from languages like ",(0,r.kt)("em",{parentName:"p"},"Rust")," and ",(0,r.kt)("em",{parentName:"p"},"ReScript")," is ",(0,r.kt)("strong",{parentName:"p"},"pattern matching"),". And before anybody comes at me: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-pattern-matching"},"yes, there is a proposal for\npattern matching in Typescript"),". And yes, this proposal should make us all very happy."),(0,r.kt)("p",null,"What ",(0,r.kt)("em",{parentName:"p"},"is")," pattern matching? To quote the almighty ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://doc.rust-lang.org/book/ch06-02-match.html"},"book")),":"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Think of a match expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a match, and at the first pattern the value \u201cfits,\u201d the value falls into the associated code block to be used during execution.")),(0,r.kt)("p",null,"Now this sounds a lot like something that already exists in both Typescript and javascript: the ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," statement. And for the most part, a ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," does act in much the same\nway as a fully-featured ",(0,r.kt)("inlineCode",{parentName:"p"},"match"),", though with some drawbacks. The main one we're going to focus on here is that ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," cases in Typescript\nare ",(0,r.kt)("strong",{parentName:"p"},"not exhaustive"),". This means there is no guarantee that your ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," is going to handle all possible values of your ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," case.\nIncidentally, in a ",(0,r.kt)("inlineCode",{parentName:"p"},"match")," in a strongly typed language like ",(0,r.kt)("em",{parentName:"p"},"Rust"),", this exhaustiveness is ",(0,r.kt)("strong",{parentName:"p"},"guaranteed")," statically by the compiler. You must handle ",(0,r.kt)("strong",{parentName:"p"},"all possible")," cases\nbefore your code will even run."),(0,r.kt)("p",null,"This has some advantages. Primarily this aids development in larger teams where multiple engineers are working broadly in the same area.\nI could create a ",(0,r.kt)("inlineCode",{parentName:"p"},"match")," that handles some variant of a union type or enum, and we would never have to worry about a co-worker\nadding a new value to the case and forgetting to handle it. Compiler says no. Your co-worker is forced to add the logic they missed. Bugs are avoided. Everyone is happy."),(0,r.kt)("p",null,"You don't get this advantage with a ",(0,r.kt)("inlineCode",{parentName:"p"},"switch"),"."),(0,r.kt)("p",null,'"But James, you stupid human", you say. "You realise you can use \'default\' in a switch, right?".'),(0,r.kt)("p",null,"Absolutely there is an option to use default, but also if you use it as a catch-all for things that you're willing to forget, then\nyou probably deserve the bugs that are about to come swarming your way.\nThe issue is that ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," really does just mean ",(0,r.kt)("em",{parentName:"p"},"default behaviour")," that is non-specific to the value being passed to your switch. You\nshould probably not rely on it to handle missing cases in types that have distinctly known possible values at the point of compilation."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NOTE: This does not apply to things like ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," where you really can have a functionally infinite set of values. Cases like this\nyou should use ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," in a switch because you literally don't have any other choice. Though this is a problem that favours eliminating ",(0,r.kt)("a",{parentName:"p",href:"https://refactoring.guru/smells/primitive-obsession"},"primitive obsession"),"\nin favour of using stronger types for your data (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"union"),"), we'll discuss that another time.")),(0,r.kt)("p",null,"So what can we do about this? How can we ask the Typescript compiler to check this for us at compile-time?"),(0,r.kt)("p",null,"Enter ",(0,r.kt)("strong",{parentName:"p"},"NEVER"),"!"),(0,r.kt)("p",null,"If you haven't come across if before, ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," is a powerful Typescript type that tells the compiler that the value in question can never occur.\nEverything is assignable to ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," is not assignable to anything. ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," isn't even assignable to ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),". It is the ultimate\nlast word in telling the compiler that this value must never occur."),(0,r.kt)("p",null,"Things like functions that solely throw errors are inferred to return ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),", and that's how functions that throw can influence\nthe control flow of a function."),(0,r.kt)("p",null,"We can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"never")," to force a ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," case to be exhaustive, by telling it that the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," case is ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),"."),(0,r.kt)("p",null,"Let's produce an example in literally the only context that has any meaning to me anymore: currency from A Song of Ice and Fire:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Coin.ts"',title:'"Coin.ts"'},'enum Coin {\n    Halfpenny,\n    Penny,\n    Halfgroat,\n    Groat,\n    Star,\n    Stag,\n    Moon,\n}\n\nfunction printValue(coin: Coin) {\n  switch (coin) {\n    case Coin.Halfpenny:\n      console.log("I am worth 23520 Golden Dragons")\n      break;\n    case Coin.Penny:\n        console.log("I am worth 11760 Golden Dragons")\n      break;\n    case Coin.Halfgroat:\n        console.log("I am worth 5880 Golden Dragons")\n      break;\n    case Coin.Groat:\n        console.log("I am worth 2940 Golden Dragons")\n      break;\n    case Coin.Star:\n        console.log("I am worth 1470 Golden Dragons")\n      break;\n    case Coin.Stag:\n        console.log("I am worth 210 Golden Dragons")\n      break;\n    case Coin.Moon:\n      console.log("I am worth 30 Golden Dragons")\n      break;\n  }\n}\n')),(0,r.kt)("p",null,"I can stick any of these coins in that I like, and i'll get my value in Dragons."),(0,r.kt)("p",null,"But wait! I've forgotten a value in my enum. I've forgotten to put in Dragons.\nIf I go and do that now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum Coin {\n    Halfpenny,\n    Penny,\n    Halfgroat,\n    Groat,\n    Star,\n    Stag,\n    Moon,\n    Dragon\n}\n")),(0,r.kt)("p",null,"and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"printValue()")," function, I don't get any print out. I've got no default."),(0,r.kt)("p",null,"I could add a default case that handles any unaccounted-for values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function printValue(coin: Coin) {\n  switch (coin) {\n    case Coin.Halfpenny:\n      console.log("23520 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Penny:\n        console.log("11760 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Halfgroat:\n        console.log("5880 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Groat:\n        console.log("2940 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Star:\n        console.log("1470 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Stag:\n        console.log("210 of me is worth 1 Golden Dragon")\n      break;\n    case Coin.Moon:\n      console.log("30 of me is worth 1 Golden Dragon")\n      break;\n    default:\n      console.log("I don\'t recognise this currency?")\n  }\n}\n')),(0,r.kt)("p",null,"But my default needs to be generic no matter how many new coins I add. It can't ever be a handler for custom logic for new items I add to the enum."),(0,r.kt)("p",null,"However, we can use the default case to ",(0,r.kt)("strong",{parentName:"p"},"assign")," the coin to ",(0,r.kt)("inlineCode",{parentName:"p"},"never"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"    default:\n      const exhaust: never = coin;\n      throw new Error(exhaust);\n  }\n")),(0,r.kt)("p",null,"And now the moment we try to compile our code with an enum case unaccounted for, we get the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"index.ts:36:13 - error TS2322: Type 'Coin' is not assignable to type 'never'.\n\n36       const exhaust: never = coin;\n~~~~~~~\n\n\nFound 1 error.\n")),(0,r.kt)("p",null,"The Typescript compiler is now actively working for us to prevent any bugs that might arise from missing branches in this switch. It is\nnow exhaustive, and no matter how many new items we add to our enum, we are forced by default to handle them, or we're not shipping."),(0,r.kt)("p",null,"Take ",(0,r.kt)("strong",{parentName:"p"},"THAT"),", dynamic languages!"))}m.isMDXComponent=!0}}]);